name: runTests

on:
  pull_request:
    branches:
      - master
      - main
  push:

jobs:
  FormatCode:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run clang-format
        run: |
          clang-format -i -style=file backend/**/*.cpp backend/**/*.h

      - name: Commit changes if any
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Format code with clang-format"
          else
            echo "No formatting changes detected."
          fi

      - name: Push changes
        if: steps.Commit_changes_if_any.outputs.commit != ''
        run: |
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cpp-linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cpp-linter/cpp-linter-action@main
        id: linter
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: file
          files-changed-only: false
          thread-comments: false

      - name: Fail fast?!
        if: steps.linter.outputs.checks-failed != 0
        run: |
          echo "Некоторые проверки линтера не пройдены. Ошибок: ${{ steps.linter.outputs.checks-failed }}"
          # Для реального развёртывания раскомментируйте следующую строку
          # exit 1

  TestOnUbuntu:
    needs: [FormatCode, cpp-linter]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install cpp + cmake
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build g++

      - name: Build
        run: |
          mkdir build
          cd build
          cmake -G Ninja ../backend
          ninja

      - name: Setup Python
        run: | 
          sudo apt-get install -y python3 python3-pip
          mv backend ../tests
          cd ../tests

      - name: Start Tests
        run: |
          cd tests
          ls
          python3 tester.py