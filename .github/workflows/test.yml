name: MegaLinter Workflow
on:
  push:
  pull_request:
    branches:
      - main
      - master

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  APPLY_FIXES: all
  APPLY_FIXES_EVENT: pull_request
  APPLY_FIXES_MODE: commit

jobs:
  linter:
    name: Run MegaLinter

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Run MegaLinter
        uses: oxsecurity/megalinter@v8
        env:
            APPLY_FIXES: all
            APPLY_FIXES_MODE: commit
            VALIDATE_ALL_CODEBASE: true # Change to true if you want to validate all code on every push
            DISABLE_LINTERS: 'ALL'
            ENABLE_LINTERS: 'CPP, PYTHON'
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  TestOnUbuntu:
    needs: [linter]

          fetch-depth: 0

      - name: MegaLinter
        id: megalinter
        uses: oxsecurity/megalinter/flavors/python@v7
        env:
          DISABLE_ERRORS: true
          GITHUB_TOKEN: ${{ secrets.PAT }}
          CPP_CPPLINT_ARGUMENTS: "--filter=-whitespace,-legal/copyright"
          C_CPPLINT_ARGUMENTS: "--filter=-whitespace,-legal/copyright"
          PYTHON_BLACK_ARGUMENTS: "--line-length=100"
          PYTHON_FLAKE8_ARGUMENTS: "--max-line-length=100"
          DISABLE_LINTERS: bandit, actionlint, jscpd, checkov, kics, cspell
          MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS: true
          REPOSITORY_CHECKOV_DISABLE_ERRORS: true
          REPOSITORY_KICS_DISABLE_ERRORS: true
          SPELL_CSPELL_DISABLE: true
          SPELL_MISSPELL_DISABLE: true

      - name: Get Changes
        id: get-changes
        if: always() && (steps.megalinter.outcome != 'skipped')
        run: |
          changes=$(git diff --no-color)
          echo "changes<<EOF" >> $GITHUB_ENV
          echo "$changes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Pull Request
        if: github.event_name == 'push' && always() && (steps.megalinter.outcome != 'skipped')
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.PAT }}
          commit-message: "[MegaLinter] Apply linter fixes"
          title: "MegaLinter fixes"
          branch: "fix/${{ github.head_ref }}"
          base: ${{ github.head_ref }}
          body: |
            ## Автоматические исправления от MegaLinter

            Этот PR содержит исправления, предложенные MegaLinter.

      - name: Comment PR
        if: github.event_name == 'pull_request' && always() && (steps.megalinter.outcome != 'skipped')
        uses: actions/upload-artifact@v4
        with:
          name: Mega-Linter reports
          path: |
            megalinter-reports
            mega-linter.log
            

  TestOnUbuntu:
    needs: [megalinter]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install cpp + cmake
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build g++

      - name: Build
        run: |
          mkdir build
          cd build
          cmake -G Ninja ../backend
          ninja
      - name: Setup Python
        run: | 
          sudo apt-get install -y python3 python3-pip
          mv backend ../tests
          cd ../tests

      - name: Start Tests
        run: |
          cd tests
          ls
          python3 tester.py